14sep-15h45
When would you want to use a remote repository rather than keeping all your work
 local ?
  I will use a remote repository for any public or collaborative project I am working on.

14sep-16h02
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
  Because my remote repository might be updated or altered by collaborators.
  I would want to be aware if new commits have been made on the project since
  my last commit.

15sep-16h31
Describe the differences between forks, clones, and branches. When would you use
one instead of another?
  forks: A copy of someone else's GitHub project under my GitHub username.
  forks exist first & foremost on GitHub (server side)
  clone: A copy of a repository (not necesarily mine) on my local machine.
  When forking with the idea of modifying a repo, I'll first have to clone it
  on my machine.
  branches: Within the same repo, branches are created to test new/experimental
  features not present in the master branch.

15sep-17h30
What is the benefit of having a copy of the last known state of the remote
stored locally?
  The benefit is having a local copy is being able to work on the project when
  offline. You can then merge remote changes when you come back online.

15sep-18h28
How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?
  Without Git/GitHub, setting up files to be reviewed by collaborators would be
  easier (email attachment, upload a server or cloud service).
  The bigger the project and the bigger the team, collaborating without
  a common version control system is a ticking bomb: how to know who did what
  and when, wich file has the priority, etc.

17sep-14h43
When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?
  Making changes in a separate branch gives us the freedom to experiment with
  a new feature without fear of breaking the master branch. This option has the
  downside of becoming time consuming & complex when merging the new features
  into master.
  Making changes directly in master is faster and implies no complex merging
  procedures. This is probably sensible in the case of very minor changes.
  The downside of this option is the risk of breaking the master branch.
